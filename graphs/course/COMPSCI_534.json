[
    {
        "data": {
            "description": "Covers the graphs, properties and geometric significance of trigonometric functions of a real variable. Other topics include trigonometric equations and identities, application, trigonometric form of complex numbers, DeMoivre's theorem, and polar and parametric equations. The course also has a significant number of applications, especially related to other disciplines.",
            "id": "MATH 113",
            "parent": "MATH",
            "title": "TRIGONOMETRY"
        }
    },
    {
        "data": {
            "description": "Covers the necessary mathematical tools needed to succeed in our algebra course and provides fundamental mathematical skills. Topics include real numbers, linear equations and inequalities, integral and fractional exponents, polynomials and their arithmetic, polynomial equations and equations with fractional exponents, the quadratic formula and completing the square, systems of two linear equations, graphing, and problem solving using algebra and graphs. All students must pass an assessment on basic mathematical skills to complete the course. The course does not count for degree credit.",
            "id": "MATH 96",
            "parent": "MATH",
            "title": "PREPARATORY ALGEBRA"
        }
    },
    {
        "data": {
            "description": "Introduction to Object-Oriented Programming using classes and objects to solve more complex problems. Introduces array-based and linked data structures: including lists, stacks, and queues. Programming assignments require writing and developing multi-class (file) programs using interfaces, generics, and exception handling to solve challenging real world problems. Topics reviewed include reading/writing data and objects from/to files and exception handling, and command line arguments. Topics introduced: object-oriented design; class vs. object; create and define interfaces and iterators; searching and sorting; abstract data types (List,Stack,Queue,PriorityQueue(Heap),Binary Search Tree); generic interfaces (parametric polymorphism); how to design and write test methods and classes; array based vs. linked node implementations; introduction to complexity analysis; recursion.",
            "id": "COMPSCI 300",
            "parent": "COMPSCI",
            "title": "PROGRAMMING II"
        }
    },
    {
        "data": {
            "description": "Introduction to differential and integral calculus and plane analytic geometry; applications; transcendental functions.",
            "id": "MATH 221",
            "parent": "MATH",
            "title": "CALCULUS AND ANALYTIC GEOMETRY 1"
        }
    },
    {
        "data": {
            "description": "Learn the process of incrementally developing small (200-500 lines) programs along with the fundamental Computer Science topics. These topics include: problem abstraction and decomposition, the edit-compile-run cycle, using variables of primitive and more complex data types, conditional and loop-based flow control, basic testing and debugging techniques, how to define and call functions (methods), and IO processing techniques. Also teaches and reinforces good programming practices including the use of a consistent style, and meaningful documentation. Intended for students who have no prior programming experience.",
            "id": "COMPSCI 200",
            "parent": "COMPSCI",
            "title": "PROGRAMMING I"
        }
    },
    {
        "data": {
            "description": "Properties of elementary functions, such as polynomial, absolute value, radical, rational, exponential, and logarithmic functions. Topics include equations, inequalities, functions, and their graphs. Students will formulate, analyze, solve, and interpret mathematical and real-world problems. Intended to provide the algebra skills required for calculus.",
            "id": "MATH 112",
            "parent": "MATH",
            "title": "ALGEBRA"
        }
    },
    {
        "data": {
            "description": "Study of sensing and computational techniques that enhance or extend the capabilities of digital photography by using methods from computer vision and computer graphics to create new visual representations. Algorithms for analyzing, improving, manipulating, combining, and synthesizing images.",
            "id": "COMPSCI 534",
            "parent": "COMPSCI",
            "title": "COMPUTATIONAL PHOTOGRAPHY"
        }
    },
    {
        "data": {
            "id": "COMPSCI",
            "type": "compound"
        }
    },
    {
        "data": {
            "id": "MATH",
            "type": "compound"
        }
    },
    {
        "data": {
            "source": "COMPSCI 200",
            "target": "COMPSCI 300"
        }
    },
    {
        "data": {
            "source": "COMPSCI 300",
            "target": "COMPSCI 534"
        }
    },
    {
        "data": {
            "source": "MATH 112",
            "target": "MATH 113"
        }
    },
    {
        "data": {
            "source": "MATH 112",
            "target": "MATH 221"
        }
    },
    {
        "data": {
            "source": "MATH 113",
            "target": "MATH 221"
        }
    },
    {
        "data": {
            "source": "MATH 221",
            "target": "COMPSCI 534"
        }
    },
    {
        "data": {
            "source": "MATH 96",
            "target": "MATH 112"
        }
    }
]